/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StudentDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T19:05:31.746220500+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class StudentDto {
  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nullable
  private String fullName;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  @javax.annotation.Nullable
  private String course;

  public static final String SERIALIZED_NAME_INTERNSHIP_PERIOD = "internshipPeriod";
  @SerializedName(SERIALIZED_NAME_INTERNSHIP_PERIOD)
  @javax.annotation.Nullable
  private String internshipPeriod;

  public static final String SERIALIZED_NAME_COURSE_YEAR = "courseYear";
  @SerializedName(SERIALIZED_NAME_COURSE_YEAR)
  @javax.annotation.Nullable
  private String courseYear;

  public static final String SERIALIZED_NAME_TUTOR_NAME = "tutorName";
  @SerializedName(SERIALIZED_NAME_TUTOR_NAME)
  @javax.annotation.Nullable
  private String tutorName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_HOURS_TOTAL = "hoursTotal";
  @SerializedName(SERIALIZED_NAME_HOURS_TOTAL)
  @javax.annotation.Nullable
  private Integer hoursTotal;

  public static final String SERIALIZED_NAME_HOURS_WORKED = "hoursWorked";
  @SerializedName(SERIALIZED_NAME_HOURS_WORKED)
  @javax.annotation.Nullable
  private Integer hoursWorked;

  public static final String SERIALIZED_NAME_HOURS_LEFT = "hoursLeft";
  @SerializedName(SERIALIZED_NAME_HOURS_LEFT)
  @javax.annotation.Nullable
  private Integer hoursLeft;

  public StudentDto() {
  }

  public StudentDto fullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
  }


  public StudentDto course(@javax.annotation.Nullable String course) {
    this.course = course;
    return this;
  }

  /**
   * Get course
   * @return course
   */
  @javax.annotation.Nullable
  public String getCourse() {
    return course;
  }

  public void setCourse(@javax.annotation.Nullable String course) {
    this.course = course;
  }


  public StudentDto internshipPeriod(@javax.annotation.Nullable String internshipPeriod) {
    this.internshipPeriod = internshipPeriod;
    return this;
  }

  /**
   * Get internshipPeriod
   * @return internshipPeriod
   */
  @javax.annotation.Nullable
  public String getInternshipPeriod() {
    return internshipPeriod;
  }

  public void setInternshipPeriod(@javax.annotation.Nullable String internshipPeriod) {
    this.internshipPeriod = internshipPeriod;
  }


  public StudentDto courseYear(@javax.annotation.Nullable String courseYear) {
    this.courseYear = courseYear;
    return this;
  }

  /**
   * Get courseYear
   * @return courseYear
   */
  @javax.annotation.Nullable
  public String getCourseYear() {
    return courseYear;
  }

  public void setCourseYear(@javax.annotation.Nullable String courseYear) {
    this.courseYear = courseYear;
  }


  public StudentDto tutorName(@javax.annotation.Nullable String tutorName) {
    this.tutorName = tutorName;
    return this;
  }

  /**
   * Get tutorName
   * @return tutorName
   */
  @javax.annotation.Nullable
  public String getTutorName() {
    return tutorName;
  }

  public void setTutorName(@javax.annotation.Nullable String tutorName) {
    this.tutorName = tutorName;
  }


  public StudentDto companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public StudentDto hoursTotal(@javax.annotation.Nullable Integer hoursTotal) {
    this.hoursTotal = hoursTotal;
    return this;
  }

  /**
   * Get hoursTotal
   * @return hoursTotal
   */
  @javax.annotation.Nullable
  public Integer getHoursTotal() {
    return hoursTotal;
  }

  public void setHoursTotal(@javax.annotation.Nullable Integer hoursTotal) {
    this.hoursTotal = hoursTotal;
  }


  public StudentDto hoursWorked(@javax.annotation.Nullable Integer hoursWorked) {
    this.hoursWorked = hoursWorked;
    return this;
  }

  /**
   * Get hoursWorked
   * @return hoursWorked
   */
  @javax.annotation.Nullable
  public Integer getHoursWorked() {
    return hoursWorked;
  }

  public void setHoursWorked(@javax.annotation.Nullable Integer hoursWorked) {
    this.hoursWorked = hoursWorked;
  }


  public StudentDto hoursLeft(@javax.annotation.Nullable Integer hoursLeft) {
    this.hoursLeft = hoursLeft;
    return this;
  }

  /**
   * Get hoursLeft
   * @return hoursLeft
   */
  @javax.annotation.Nullable
  public Integer getHoursLeft() {
    return hoursLeft;
  }

  public void setHoursLeft(@javax.annotation.Nullable Integer hoursLeft) {
    this.hoursLeft = hoursLeft;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StudentDto studentDto = (StudentDto) o;
    return Objects.equals(this.fullName, studentDto.fullName) &&
        Objects.equals(this.course, studentDto.course) &&
        Objects.equals(this.internshipPeriod, studentDto.internshipPeriod) &&
        Objects.equals(this.courseYear, studentDto.courseYear) &&
        Objects.equals(this.tutorName, studentDto.tutorName) &&
        Objects.equals(this.companyName, studentDto.companyName) &&
        Objects.equals(this.hoursTotal, studentDto.hoursTotal) &&
        Objects.equals(this.hoursWorked, studentDto.hoursWorked) &&
        Objects.equals(this.hoursLeft, studentDto.hoursLeft);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, course, internshipPeriod, courseYear, tutorName, companyName, hoursTotal, hoursWorked, hoursLeft);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StudentDto {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    internshipPeriod: ").append(toIndentedString(internshipPeriod)).append("\n");
    sb.append("    courseYear: ").append(toIndentedString(courseYear)).append("\n");
    sb.append("    tutorName: ").append(toIndentedString(tutorName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    hoursTotal: ").append(toIndentedString(hoursTotal)).append("\n");
    sb.append("    hoursWorked: ").append(toIndentedString(hoursWorked)).append("\n");
    sb.append("    hoursLeft: ").append(toIndentedString(hoursLeft)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullName");
    openapiFields.add("course");
    openapiFields.add("internshipPeriod");
    openapiFields.add("courseYear");
    openapiFields.add("tutorName");
    openapiFields.add("companyName");
    openapiFields.add("hoursTotal");
    openapiFields.add("hoursWorked");
    openapiFields.add("hoursLeft");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StudentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StudentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StudentDto is not found in the empty JSON string", StudentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StudentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StudentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("course") != null && !jsonObj.get("course").isJsonNull()) && !jsonObj.get("course").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `course` to be a primitive type in the JSON string but got `%s`", jsonObj.get("course").toString()));
      }
      if ((jsonObj.get("internshipPeriod") != null && !jsonObj.get("internshipPeriod").isJsonNull()) && !jsonObj.get("internshipPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internshipPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internshipPeriod").toString()));
      }
      if ((jsonObj.get("courseYear") != null && !jsonObj.get("courseYear").isJsonNull()) && !jsonObj.get("courseYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseYear").toString()));
      }
      if ((jsonObj.get("tutorName") != null && !jsonObj.get("tutorName").isJsonNull()) && !jsonObj.get("tutorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tutorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tutorName").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StudentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StudentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StudentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StudentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<StudentDto>() {
           @Override
           public void write(JsonWriter out, StudentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StudentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StudentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StudentDto
   * @throws IOException if the JSON string is invalid with respect to StudentDto
   */
  public static StudentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StudentDto.class);
  }

  /**
   * Convert an instance of StudentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

