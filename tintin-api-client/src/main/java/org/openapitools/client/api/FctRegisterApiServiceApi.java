/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateRegisterRequest;
import org.openapitools.client.model.FCTRegister;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FctRegisterApiServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FctRegisterApiServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FctRegisterApiServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRegister
     * @param createRegisterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegisterCall(CreateRegisterRequest createRegisterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRegisterRequest;

        // create path and map variables
        String localVarPath = "/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegisterValidateBeforeCall(CreateRegisterRequest createRegisterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRegisterRequest' is set
        if (createRegisterRequest == null) {
            throw new ApiException("Missing the required parameter 'createRegisterRequest' when calling createRegister(Async)");
        }

        return createRegisterCall(createRegisterRequest, _callback);

    }

    /**
     * Add register
     * Returns added register
     * @param createRegisterRequest  (required)
     * @return FCTRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FCTRegister createRegister(CreateRegisterRequest createRegisterRequest) throws ApiException {
        ApiResponse<FCTRegister> localVarResp = createRegisterWithHttpInfo(createRegisterRequest);
        return localVarResp.getData();
    }

    /**
     * Add register
     * Returns added register
     * @param createRegisterRequest  (required)
     * @return ApiResponse&lt;FCTRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FCTRegister> createRegisterWithHttpInfo(CreateRegisterRequest createRegisterRequest) throws ApiException {
        okhttp3.Call localVarCall = createRegisterValidateBeforeCall(createRegisterRequest, null);
        Type localVarReturnType = new TypeToken<FCTRegister>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add register (asynchronously)
     * Returns added register
     * @param createRegisterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegisterAsync(CreateRegisterRequest createRegisterRequest, final ApiCallback<FCTRegister> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegisterValidateBeforeCall(createRegisterRequest, _callback);
        Type localVarReturnType = new TypeToken<FCTRegister>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegister
     * @param idRegister  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegisterCall(Long idRegister, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/register/{idRegister}"
            .replace("{" + "idRegister" + "}", localVarApiClient.escapeString(idRegister.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegisterValidateBeforeCall(Long idRegister, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idRegister' is set
        if (idRegister == null) {
            throw new ApiException("Missing the required parameter 'idRegister' when calling deleteRegister(Async)");
        }

        return deleteRegisterCall(idRegister, _callback);

    }

    /**
     * Delete register by ID
     * 
     * @param idRegister  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRegister(Long idRegister) throws ApiException {
        deleteRegisterWithHttpInfo(idRegister);
    }

    /**
     * Delete register by ID
     * 
     * @param idRegister  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRegisterWithHttpInfo(Long idRegister) throws ApiException {
        okhttp3.Call localVarCall = deleteRegisterValidateBeforeCall(idRegister, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete register by ID (asynchronously)
     * 
     * @param idRegister  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegisterAsync(Long idRegister, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegisterValidateBeforeCall(idRegister, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegister
     * @param idRegister  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegisterCall(Long idRegister, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/register/{idRegister}"
            .replace("{" + "idRegister" + "}", localVarApiClient.escapeString(idRegister.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegisterValidateBeforeCall(Long idRegister, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idRegister' is set
        if (idRegister == null) {
            throw new ApiException("Missing the required parameter 'idRegister' when calling getRegister(Async)");
        }

        return getRegisterCall(idRegister, _callback);

    }

    /**
     * Get register by ID
     * Returns a single register
     * @param idRegister  (required)
     * @return FCTRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FCTRegister getRegister(Long idRegister) throws ApiException {
        ApiResponse<FCTRegister> localVarResp = getRegisterWithHttpInfo(idRegister);
        return localVarResp.getData();
    }

    /**
     * Get register by ID
     * Returns a single register
     * @param idRegister  (required)
     * @return ApiResponse&lt;FCTRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FCTRegister> getRegisterWithHttpInfo(Long idRegister) throws ApiException {
        okhttp3.Call localVarCall = getRegisterValidateBeforeCall(idRegister, null);
        Type localVarReturnType = new TypeToken<FCTRegister>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get register by ID (asynchronously)
     * Returns a single register
     * @param idRegister  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegisterAsync(Long idRegister, final ApiCallback<FCTRegister> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegisterValidateBeforeCall(idRegister, _callback);
        Type localVarReturnType = new TypeToken<FCTRegister>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegisterDates
     * @param idStudent  (required)
     * @param filtro  (required)
     * @param since  (required)
     * @param until  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegisterDatesCall(Long idStudent, String filtro, LocalDate since, LocalDate until, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/register/filter/{idStudent}"
            .replace("{" + "idStudent" + "}", localVarApiClient.escapeString(idStudent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filtro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filtro", filtro));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegisterDatesValidateBeforeCall(Long idStudent, String filtro, LocalDate since, LocalDate until, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idStudent' is set
        if (idStudent == null) {
            throw new ApiException("Missing the required parameter 'idStudent' when calling getRegisterDates(Async)");
        }

        // verify the required parameter 'filtro' is set
        if (filtro == null) {
            throw new ApiException("Missing the required parameter 'filtro' when calling getRegisterDates(Async)");
        }

        // verify the required parameter 'since' is set
        if (since == null) {
            throw new ApiException("Missing the required parameter 'since' when calling getRegisterDates(Async)");
        }

        // verify the required parameter 'until' is set
        if (until == null) {
            throw new ApiException("Missing the required parameter 'until' when calling getRegisterDates(Async)");
        }

        return getRegisterDatesCall(idStudent, filtro, since, until, _callback);

    }

    /**
     * Gets registers of a student by ID
     * Returns a list of registers concurred between specified dates (It may be empty)
     * @param idStudent  (required)
     * @param filtro  (required)
     * @param since  (required)
     * @param until  (required)
     * @return List&lt;FCTRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<FCTRegister> getRegisterDates(Long idStudent, String filtro, LocalDate since, LocalDate until) throws ApiException {
        ApiResponse<List<FCTRegister>> localVarResp = getRegisterDatesWithHttpInfo(idStudent, filtro, since, until);
        return localVarResp.getData();
    }

    /**
     * Gets registers of a student by ID
     * Returns a list of registers concurred between specified dates (It may be empty)
     * @param idStudent  (required)
     * @param filtro  (required)
     * @param since  (required)
     * @param until  (required)
     * @return ApiResponse&lt;List&lt;FCTRegister&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FCTRegister>> getRegisterDatesWithHttpInfo(Long idStudent, String filtro, LocalDate since, LocalDate until) throws ApiException {
        okhttp3.Call localVarCall = getRegisterDatesValidateBeforeCall(idStudent, filtro, since, until, null);
        Type localVarReturnType = new TypeToken<List<FCTRegister>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets registers of a student by ID (asynchronously)
     * Returns a list of registers concurred between specified dates (It may be empty)
     * @param idStudent  (required)
     * @param filtro  (required)
     * @param since  (required)
     * @param until  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegisterDatesAsync(Long idStudent, String filtro, LocalDate since, LocalDate until, final ApiCallback<List<FCTRegister>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegisterDatesValidateBeforeCall(idStudent, filtro, since, until, _callback);
        Type localVarReturnType = new TypeToken<List<FCTRegister>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
